<%- include('../partials/header') %>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Inter', sans-serif;
      background-color: #f3f4f6;
    }

    .booking-container {
      max-width: 600px;
      margin: 4rem auto;
      padding: 2.5rem;
      background-color: #ffffff;
      border-radius: 1rem;
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    .booking-title {
      font-size: 2.25rem;
      font-weight: 700;
      color: #1f2937;
      margin-bottom: 2rem;
      text-align: center;
    }

    .form-label {
      font-weight: 600;
      color: #374151;
      margin-bottom: 0.5rem;
      display: block;
    }

    .form-control {
      width: 100%;
      padding: 0.75rem 1rem;
      border: 1px solid #d1d5db;
      border-radius: 0.5rem;
      font-size: 1rem;
      color: #1f2937;
      transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }

    .form-control:focus {
      outline: none;
      border-color: #4f46e5;
      box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.2);
    }

    .mb-3 {
      margin-bottom: 1.5rem;
    }

    .btn-booking {
      width: 100%;
      padding: 1rem 1.5rem;
      background-color: #4f46e5;
      color: #ffffff;
      font-weight: 600;
      border-radius: 0.75rem;
      border: none;
      cursor: pointer;
      font-size: 1.125rem;
      transition: background-color 0.2s ease-in-out, transform 0.1s ease-in-out, opacity 0.3s ease-in-out;
    }

    .btn-booking:hover {
      background-color: #4338ca;
      transform: translateY(-1px);
    }

    .btn-booking:active {
      transform: translateY(0);
    }

    /* Disabled state for the button */
    .btn-booking:disabled {
      background-color: #9ca3af;
      /* A lighter gray for disabled state */
      cursor: not-allowed;
      opacity: 0.7;
      transform: none;
      /* Remove hover/active transform */
    }

    .btn-booking:disabled:hover {
      background-color: #9ca3af;
      /* Keep the same color on hover when disabled */
    }


    /* Modal styles */
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.6);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      opacity: 0;
      visibility: hidden;
      transition: opacity 0.3s ease-in-out, visibility 0.3s ease-in-out;
    }

    .modal-overlay.show {
      opacity: 1;
      visibility: visible;
    }

    .modal-content {
      background-color: #ffffff;
      padding: 2.5rem;
      border-radius: 1rem;
      box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
      width: 90%;
      max-width: 450px;
      transform: translateY(-20px);
      transition: transform 0.3s ease-in-out;
    }

    .modal-overlay.show .modal-content {
      transform: translateY(0);
    }

    .modal-title {
      font-size: 1.75rem;
      font-weight: 700;
      color: #1f2937;
      margin-bottom: 1.5rem;
      text-align: center;
    }

    .modal-info p {
      font-size: 1.125rem;
      margin-bottom: 0.75rem;
      color: #374151;
    }

    .modal-info strong {
      color: #1f2937;
    }

    .modal-actions {
      display: flex;
      justify-content: space-around;
      margin-top: 2rem;
      gap: 1rem;
    }

    .modal-btn {
      padding: 0.75rem 1.5rem;
      border-radius: 0.75rem;
      font-weight: 600;
      cursor: pointer;
      border: none;
      font-size: 1rem;
      transition: background-color 0.2s ease-in-out, transform 0.1s ease-in-out;
      flex: 1;
    }

    .modal-btn-confirm {
      background-color: #22c55e;
      color: #ffffff;
    }

    .modal-btn-confirm:hover {
      background-color: #16a34a;
      transform: translateY(-1px);
    }

    .modal-btn-cancel {
      background-color: #ef4444;
      color: #ffffff;
    }

    .modal-btn-cancel:hover {
      background-color: #dc2626;
      transform: translateY(-1px);
    }

    /* Checkbox specific styles */
    .checkbox-container {
      display: flex;
      align-items: center;
      margin-bottom: 1.5rem;
    }

    .checkbox-container input[type="checkbox"] {
      margin-right: 0.75rem;
      width: 1.25rem;
      height: 1.25rem;
      cursor: pointer;
      accent-color: #4f46e5;
      /* Changes checkbox color */
    }

    .checkbox-container label {
      margin-bottom: 0;
      /* Override default label margin */
      font-weight: 500;
      color: #374151;
      cursor: pointer;
    }

    /* Invalid feedback styles */
    .invalid-feedback {
      display: none;
      color: #dc2626;
      font-size: 0.875rem;
      margin-top: 0.5rem;
    }

    .form-control.is-invalid {
      border-color: #dc2626;
      box-shadow: 0 0 0 3px rgba(220, 38, 38, 0.2);
    }

    @media (max-width: 768px) {
      .booking-container {
        margin: 2rem 1rem;
        padding: 1.5rem;
      }

      .booking-title {
        font-size: 1.75rem;
      }

      .modal-content {
        padding: 1.5rem;
      }

      .modal-title {
        font-size: 1.5rem;
      }

      .modal-info p {
        font-size: 1rem;
      }

      .modal-actions {
        flex-direction: column;
      }
    }
  </style>

  <div class="booking-container">
    <h1 class="booking-title">Book Tour: <%= tour.title %>
    </h1>
    <form id="bookingForm" action="/bookings" method="POST" class="booking-form">
      <input type="hidden" name="tourId" value="<%= tour._id %>" />
      <div class="mb-3">
        <label for="customerName" class="form-label">Full Name</label>
        <input type="text" class="form-control" id="customerName" name="customerName" required value="<%= user ? user.fullname : '' %>" />
        <div class="invalid-feedback" id="nameError">Full name is required.</div>
      </div>
      <div class="mb-3">
        <label for="customerEmail" class="form-label">Email</label>
        <input type="email" class="form-control" id="customerEmail" name="customerEmail" required value="<%= user ? user.email : '' %>" />
        <div class="invalid-feedback" id="emailError">Please enter a valid email address.</div>
      </div>
      <div class="mb-3">
        <label for="customerPhone" class="form-label">Phone Number</label>
        <input type="text" class="form-control" id="customerPhone" name="customerPhone" required value="<%= user ? user.phonenumber : '' %>" />
        <div class="invalid-feedback" id="phoneError">Phone number must be exactly 10 digits.</div>
      </div>
      <div class="mb-3">
        <label for="participants" class="form-label">Number of Participants</label>
        <input type="number" class="form-control" id="participants" name="participants" min="1" required />
        <div class="invalid-feedback" id="participantsError">Number of participants must be greater than 0.</div>
      </div>
      <div class="mb-3">
        <label for="startDate" class="form-label">Start Date</label>
        <input type="date" class="form-control" id="startDate" name="startDate" required />
        <div class="invalid-feedback" id="startDateError">Start date cannot be in the past.</div>
      </div>
      <div class="checkbox-container">
        <input type="checkbox" id="termsCheckbox" name="termsAccepted" required />
        <label for="termsCheckbox">I agree with the above information and want to continue</label>
      </div>
      <button type="button" id="confirmButton" class="btn btn-booking" disabled>Confirm Booking ($<%= tour.price %>)</button>
    </form>
  </div>

  <!-- Confirmation Modal -->
  <div id="confirmationModal" class="modal-overlay">
    <div class="modal-content">
      <h2 class="modal-title">Confirm your booking information</h2>
      <div class="modal-info">
        <p><strong>Tour:</strong> <span id="modalTourTitle"></span></p>
        <p><strong>Full Name:</strong> <span id="modalCustomerName"></span></p>
        <p><strong>Email:</strong> <span id="modalCustomerEmail"></span></p>
        <p><strong>Phone Number:</strong> <span id="modalCustomerPhone"></span></p>
        <p><strong>Number of Participants:</strong> <span id="modalParticipants"></span></p>
        <p><strong>Start Date:</strong> <span id="modalStartDate"></span></p>
        <p><strong>Price:</strong> $<%= tour.price %></p>
      </div>
      <div class="modal-actions">
        <button type="button" id="modalConfirmBtn" class="modal-btn modal-btn-confirm">Confirm</button>
        <button type="button" id="modalCancelBtn" class="modal-btn modal-btn-cancel">Cancel</button>
      </div>
    </div>
  </div>

  <%- include('../partials/footer') %>

    <script>
      document.addEventListener('DOMContentLoaded', function () {
        const confirmButton = document.getElementById('confirmButton');
        const bookingForm = document.getElementById('bookingForm');
        const confirmationModal = document.getElementById('confirmationModal');
        const modalTourTitle = document.getElementById('modalTourTitle');
        const modalCustomerName = document.getElementById('modalCustomerName');
        const modalCustomerEmail = document.getElementById('modalCustomerEmail');
        const modalConfirmBtn = document.getElementById('modalConfirmBtn');
        const modalCancelBtn = document.getElementById('modalCancelBtn');
        const customerNameInput = document.getElementById('customerName');
        const customerEmailInput = document.getElementById('customerEmail');
        const termsCheckbox = document.getElementById('termsCheckbox');
        const participantsInput = document.getElementById('participants');
        const startDateInput = document.getElementById('startDate');
        const participantsError = document.getElementById('participantsError');
        const startDateError = document.getElementById('startDateError');
        const customerPhoneInput = document.getElementById('customerPhone');
        const phoneError = document.getElementById('phoneError');
        const emailError = document.getElementById('emailError');
        const nameError = document.getElementById('nameError');
        const modalCustomerPhone = document.getElementById('modalCustomerPhone');
        const modalParticipants = document.getElementById('modalParticipants');
        const modalStartDate = document.getElementById('modalStartDate');

        // Hide error by default
        participantsError.style.display = 'none';
        startDateError.style.display = 'none';
        phoneError.style.display = 'none';
        emailError.style.display = 'none';
        nameError.style.display = 'none';

        // Validate participants > 0
        function validateParticipants() {
          if (parseInt(participantsInput.value) < 1) {
            participantsInput.classList.add('is-invalid');
            participantsError.style.display = 'block';
            return false;
          } else {
            participantsInput.classList.remove('is-invalid');
            participantsError.style.display = 'none';
            return true;
          }
        }
        participantsInput.addEventListener('input', validateParticipants);

        // Validate start date is not in the past
        function validateStartDate() {
          const today = new Date();
          today.setHours(0,0,0,0);
          const selected = new Date(startDateInput.value);
          if (startDateInput.value && selected < today) {
            startDateInput.classList.add('is-invalid');
            startDateError.style.display = 'block';
            return false;
          } else {
            startDateInput.classList.remove('is-invalid');
            startDateError.style.display = 'none';
            return true;
          }
        }
        startDateInput.addEventListener('change', validateStartDate);

        // Validate phone: exactly 10 digits
        function validatePhone() {
          const phone = customerPhoneInput.value.trim();
          if (!/^\d{10}$/.test(phone)) {
            customerPhoneInput.classList.add('is-invalid');
            phoneError.style.display = 'block';
            return false;
          } else {
            customerPhoneInput.classList.remove('is-invalid');
            phoneError.style.display = 'none';
            return true;
          }
        }
        customerPhoneInput.addEventListener('input', validatePhone);

        // Validate email: correct syntax
        function validateEmail() {
          const email = customerEmailInput.value.trim();
          // Simple email regex
          const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          if (!emailRegex.test(email)) {
            customerEmailInput.classList.add('is-invalid');
            emailError.style.display = 'block';
            return false;
          } else {
            customerEmailInput.classList.remove('is-invalid');
            emailError.style.display = 'none';
            return true;
          }
        }
        customerEmailInput.addEventListener('input', validateEmail);

        // Validate name: not empty
        function validateName() {
          const name = customerNameInput.value.trim();
          if (name === '') {
            customerNameInput.classList.add('is-invalid');
            nameError.style.display = 'block';
            return false;
          } else {
            customerNameInput.classList.remove('is-invalid');
            nameError.style.display = 'none';
            return true;
          }
        }
        customerNameInput.addEventListener('input', validateName);

        // Function to update button disabled state based on checkbox and validation
        function updateButtonState() {
          confirmButton.disabled = !termsCheckbox.checked || !validateName() || !validateEmail() || !validatePhone() || !validateParticipants() || !validateStartDate();
        }
        termsCheckbox.addEventListener('change', updateButtonState);
        participantsInput.addEventListener('input', updateButtonState);
        startDateInput.addEventListener('change', updateButtonState);
        customerPhoneInput.addEventListener('input', updateButtonState);
        customerEmailInput.addEventListener('input', updateButtonState);
        customerNameInput.addEventListener('input', updateButtonState);
        updateButtonState();

        // Function to show the modal
        function showModal() {
          if (!bookingForm.checkValidity() || !validateName() || !validateEmail() || !validatePhone() || !validateParticipants() || !validateStartDate()) {
            bookingForm.reportValidity();
            validateName();
            validateEmail();
            validatePhone();
            validateParticipants();
            validateStartDate();
            return;
          }
          modalTourTitle.textContent = "<%= tour.title %>";
          modalCustomerName.textContent = customerNameInput.value;
          modalCustomerEmail.textContent = customerEmailInput.value;
          modalCustomerPhone.textContent = customerPhoneInput.value;
          modalParticipants.textContent = participantsInput.value;
          modalStartDate.textContent = startDateInput.value;
          confirmationModal.classList.add('show');
        }
        confirmButton.addEventListener('click', showModal);
        modalConfirmBtn.addEventListener('click', function () {
          if (bookingForm.checkValidity() && validateName() && validateEmail() && validatePhone() && validateParticipants() && validateStartDate()) {
            // Gửi AJAX tạo booking, nhận link QR và redirect
            const formData = {
              tourId: bookingForm.tourId.value,
              customerName: customerNameInput.value,
              customerEmail: customerEmailInput.value,
              customerPhone: customerPhoneInput.value,
              participants: participantsInput.value,
              startDate: startDateInput.value
            };
            fetch('/bookings', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(formData)
            })
            .then(res => res.json())
            .then(data => {
              if (data.success && data.paymentLink) {
                window.location.href = data.paymentLink;
              } else {
                alert('Đặt tour thất bại!');
              }
            })
            .catch(() => alert('Lỗi kết nối server!'));
            confirmationModal.classList.remove('show');
          } else {
            bookingForm.reportValidity();
            confirmationModal.classList.remove('show');
          }
        });
        modalCancelBtn.addEventListener('click', function () {
          confirmationModal.classList.remove('show');
        });
        confirmationModal.addEventListener('click', function (event) {
          if (event.target === confirmationModal) {
            confirmationModal.classList.remove('show');
          }
        });
      });
    </script>